
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


from ._transform_ops_gen import _Dialect

@_ods_cext.register_operation(_Dialect)
class PDLMatchOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.pdl_match"

  _ODS_REGIONS = (0, True)

  def __init__(self, matched, root, pattern_name, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(root)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["pattern_name"] = (pattern_name if (
    isinstance(pattern_name, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('SymbolRefAttr')(pattern_name, context=_ods_context))
    results.append(matched)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def root(self):
    return self.operation.operands[0]

  @builtins.property
  def pattern_name(self):
    return self.operation.attributes["pattern_name"]

  @pattern_name.setter
  def pattern_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["pattern_name"] = value

  @builtins.property
  def matched(self):
    return self.operation.results[0]

def pdl_match(matched, root, pattern_name, *, loc=None, ip=None) -> _ods_ir.Value:
  return PDLMatchOp(matched=matched, root=root, pattern_name=pattern_name, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class WithPDLPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.with_pdl_patterns"

  _ODS_REGIONS = (1, True)

  def __init__(self, *, root=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if root is not None: operands.append(root)
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def root(self):
    return None if len(self.operation.operands) < 1 else self.operation.operands[0]

  @builtins.property
  def body(self):
    return self.regions[0]

def with_pdl_patterns(*, root=None, loc=None, ip=None) -> _ods_ir.Operation:
  return WithPDLPatternsOp(root=root, loc=loc, ip=ip)
