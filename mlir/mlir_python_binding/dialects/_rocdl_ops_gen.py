
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "rocdl"

@_ods_cext.register_operation(_Dialect)
class BallotOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.ballot"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, pred, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(pred)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def pred(self):
    return self.operation.operands[0]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def ballot(res, pred, *, loc=None, ip=None) -> _ods_ir.Value:
  return BallotOp(res=res, pred=pred, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class BarrierOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.barrier"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

def barrier(*, loc=None, ip=None) -> _ods_ir.Operation:
  return BarrierOp(loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class BarrierSignalOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.s.barrier.signal"

  _ODS_REGIONS = (0, True)

  def __init__(self, id, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["id"] = (id if (
    isinstance(id, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(id, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def id(self):
    return self.operation.attributes["id"]

  @id.setter
  def id(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["id"] = value

def s_barrier_signal(id, *, loc=None, ip=None) -> _ods_ir.Operation:
  return BarrierSignalOp(id=id, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class BarrierWaitOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.s.barrier.wait"

  _ODS_REGIONS = (0, True)

  def __init__(self, id, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["id"] = (id if (
    isinstance(id, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I16Attr')) else
      _ods_ir.AttrBuilder.get('I16Attr')(id, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def id(self):
    return self.operation.attributes["id"]

  @id.setter
  def id(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["id"] = value

def s_barrier_wait(id, *, loc=None, ip=None) -> _ods_ir.Operation:
  return BarrierWaitOp(id=id, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class BlockDimXOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workgroup.dim.x"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, range=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if range is not None: attributes["range"] = (range if (
        isinstance(range, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_ConstantRangeAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_ConstantRangeAttr')(range, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def range(self):
    if "range" not in self.operation.attributes:
      return None
    return self.operation.attributes["range"]

  @range.setter
  def range(self, value):
    if value is not None:
      self.operation.attributes["range"] = value
    elif "range" in self.operation.attributes:
      del self.operation.attributes["range"]

  @range.deleter
  def range(self):
    del self.operation.attributes["range"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workgroup_dim_x(res, *, range=None, loc=None, ip=None) -> _ods_ir.Value:
  return BlockDimXOp(res=res, range=range, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class BlockDimYOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workgroup.dim.y"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, range=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if range is not None: attributes["range"] = (range if (
        isinstance(range, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_ConstantRangeAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_ConstantRangeAttr')(range, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def range(self):
    if "range" not in self.operation.attributes:
      return None
    return self.operation.attributes["range"]

  @range.setter
  def range(self, value):
    if value is not None:
      self.operation.attributes["range"] = value
    elif "range" in self.operation.attributes:
      del self.operation.attributes["range"]

  @range.deleter
  def range(self):
    del self.operation.attributes["range"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workgroup_dim_y(res, *, range=None, loc=None, ip=None) -> _ods_ir.Value:
  return BlockDimYOp(res=res, range=range, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class BlockDimZOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workgroup.dim.z"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, range=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if range is not None: attributes["range"] = (range if (
        isinstance(range, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_ConstantRangeAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_ConstantRangeAttr')(range, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def range(self):
    if "range" not in self.operation.attributes:
      return None
    return self.operation.attributes["range"]

  @range.setter
  def range(self, value):
    if value is not None:
      self.operation.attributes["range"] = value
    elif "range" in self.operation.attributes:
      del self.operation.attributes["range"]

  @range.deleter
  def range(self):
    del self.operation.attributes["range"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workgroup_dim_z(res, *, range=None, loc=None, ip=None) -> _ods_ir.Value:
  return BlockDimZOp(res=res, range=range, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class BlockIdXOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workgroup.id.x"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, range=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if range is not None: attributes["range"] = (range if (
        isinstance(range, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_ConstantRangeAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_ConstantRangeAttr')(range, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def range(self):
    if "range" not in self.operation.attributes:
      return None
    return self.operation.attributes["range"]

  @range.setter
  def range(self, value):
    if value is not None:
      self.operation.attributes["range"] = value
    elif "range" in self.operation.attributes:
      del self.operation.attributes["range"]

  @range.deleter
  def range(self):
    del self.operation.attributes["range"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workgroup_id_x(res, *, range=None, loc=None, ip=None) -> _ods_ir.Value:
  return BlockIdXOp(res=res, range=range, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class BlockIdYOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workgroup.id.y"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, range=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if range is not None: attributes["range"] = (range if (
        isinstance(range, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_ConstantRangeAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_ConstantRangeAttr')(range, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def range(self):
    if "range" not in self.operation.attributes:
      return None
    return self.operation.attributes["range"]

  @range.setter
  def range(self, value):
    if value is not None:
      self.operation.attributes["range"] = value
    elif "range" in self.operation.attributes:
      del self.operation.attributes["range"]

  @range.deleter
  def range(self):
    del self.operation.attributes["range"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workgroup_id_y(res, *, range=None, loc=None, ip=None) -> _ods_ir.Value:
  return BlockIdYOp(res=res, range=range, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class BlockIdZOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workgroup.id.z"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, range=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if range is not None: attributes["range"] = (range if (
        isinstance(range, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_ConstantRangeAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_ConstantRangeAttr')(range, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def range(self):
    if "range" not in self.operation.attributes:
      return None
    return self.operation.attributes["range"]

  @range.setter
  def range(self, value):
    if value is not None:
      self.operation.attributes["range"] = value
    elif "range" in self.operation.attributes:
      del self.operation.attributes["range"]

  @range.deleter
  def range(self):
    del self.operation.attributes["range"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workgroup_id_z(res, *, range=None, loc=None, ip=None) -> _ods_ir.Value:
  return BlockIdZOp(res=res, range=range, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtF32Bf8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.f32.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, srcA, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(srcA)
    operands.append(byteSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def srcA(self):
    return self.operation.operands[0]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_f32_bf8(res, src_a, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtF32Bf8Op(res=res, srcA=src_a, byteSel=byte_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtF32Fp8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.f32.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, srcA, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(srcA)
    operands.append(byteSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def srcA(self):
    return self.operation.operands[0]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_f32_fp8(res, src_a, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtF32Fp8Op(res=res, srcA=src_a, byteSel=byte_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtPkBf8F32Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.pk.bf8.f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, srcA, srcB, old, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(srcA)
    operands.append(srcB)
    operands.append(old)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def srcA(self):
    return self.operation.operands[0]

  @builtins.property
  def srcB(self):
    return self.operation.operands[1]

  @builtins.property
  def old(self):
    return self.operation.operands[2]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_pk_bf8_f32(res, src_a, src_b, old, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtPkBf8F32Op(res=res, srcA=src_a, srcB=src_b, old=old, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtPkF32Bf8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.pk.f32.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_pk_f32_bf8(res, src, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtPkF32Bf8Op(res=res, src=src, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtPkF32Fp8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.pk.f32.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_pk_f32_fp8(res, src, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtPkF32Fp8Op(res=res, src=src, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtPkFp8F32Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.pk.fp8.f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, srcA, srcB, old, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(srcA)
    operands.append(srcB)
    operands.append(old)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def srcA(self):
    return self.operation.operands[0]

  @builtins.property
  def srcB(self):
    return self.operation.operands[1]

  @builtins.property
  def old(self):
    return self.operation.operands[2]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_pk_fp8_f32(res, src_a, src_b, old, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtPkFp8F32Op(res=res, srcA=src_a, srcB=src_b, old=old, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtPkRtz(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.pkrtz"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, srcA, srcB, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(srcA)
    operands.append(srcB)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def srcA(self):
    return self.operation.operands[0]

  @builtins.property
  def srcB(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_pkrtz(res, src_a, src_b, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtPkRtz(res=res, srcA=src_a, srcB=src_b, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF16Bf8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.f16.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src, scale, byteSel, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src)
    operands.append(scale)
    operands.append(byteSel)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def scale(self):
    return self.operation.operands[2]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[3]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[4]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_f16_bf8(res, old, src, scale, byte_sel, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF16Bf8Op(res=res, old=old, src=src, scale=scale, byteSel=byte_sel, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF16Fp8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.f16.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src, scale, byteSel, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src)
    operands.append(scale)
    operands.append(byteSel)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def scale(self):
    return self.operation.operands[2]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[3]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[4]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_f16_fp8(res, old, src, scale, byte_sel, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF16Fp8Op(res=res, old=old, src=src, scale=scale, byteSel=byte_sel, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32Bf8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.f32.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, scale, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src)
    operands.append(scale)
    operands.append(byteSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def scale(self):
    return self.operation.operands[1]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[2]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_f32_bf8(res, src, scale, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32Bf8Op(res=res, src=src, scale=scale, byteSel=byte_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32Fp8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.f32.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, scale, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src)
    operands.append(scale)
    operands.append(byteSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def scale(self):
    return self.operation.operands[1]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[2]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_f32_fp8(res, src, scale, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32Fp8Op(res=res, src=src, scale=scale, byteSel=byte_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32PkBf8Bf16Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.pk.bf8.bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src, scale, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src)
    operands.append(scale)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def scale(self):
    return self.operation.operands[2]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_pk_bf8_bf16(res, old, src, scale, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32PkBf8Bf16Op(res=res, old=old, src=src, scale=scale, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32PkBf8F16Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.pk.bf8.f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src, scale, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src)
    operands.append(scale)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def scale(self):
    return self.operation.operands[2]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_pk_bf8_f16(res, old, src, scale, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32PkBf8F16Op(res=res, old=old, src=src, scale=scale, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32PkBf8F32Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.pk.bf8.f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, srcA, srcB, scale, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(srcA)
    operands.append(srcB)
    operands.append(scale)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def srcA(self):
    return self.operation.operands[1]

  @builtins.property
  def srcB(self):
    return self.operation.operands[2]

  @builtins.property
  def scale(self):
    return self.operation.operands[3]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[4]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_pk_bf8_f32(res, old, src_a, src_b, scale, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32PkBf8F32Op(res=res, old=old, srcA=src_a, srcB=src_b, scale=scale, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32PkBf16Bf8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.pk.bf16.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, scale, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src)
    operands.append(scale)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def scale(self):
    return self.operation.operands[1]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[2]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_pk_bf16_bf8(res, src, scale, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32PkBf16Bf8Op(res=res, src=src, scale=scale, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32PkBf16Fp8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.pk.bf16.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, scale, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src)
    operands.append(scale)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def scale(self):
    return self.operation.operands[1]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[2]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_pk_bf16_fp8(res, src, scale, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32PkBf16Fp8Op(res=res, src=src, scale=scale, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32PkF16Bf8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.pk.f16.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, scale, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src)
    operands.append(scale)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def scale(self):
    return self.operation.operands[1]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[2]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_pk_f16_bf8(res, src, scale, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32PkF16Bf8Op(res=res, src=src, scale=scale, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32PkF16Fp8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.pk.f16.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, scale, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src)
    operands.append(scale)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def scale(self):
    return self.operation.operands[1]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[2]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_pk_f16_fp8(res, src, scale, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32PkF16Fp8Op(res=res, src=src, scale=scale, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32PkF32Bf8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.pk.f32.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, scale, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src)
    operands.append(scale)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def scale(self):
    return self.operation.operands[1]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[2]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_pk_f32_bf8(res, src, scale, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32PkF32Bf8Op(res=res, src=src, scale=scale, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32PkF32Fp8Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.pk.f32.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, scale, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src)
    operands.append(scale)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def scale(self):
    return self.operation.operands[1]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[2]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_pk_f32_fp8(res, src, scale, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32PkF32Fp8Op(res=res, src=src, scale=scale, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32PkFp8Bf16Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.pk.fp8.bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src, scale, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src)
    operands.append(scale)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def scale(self):
    return self.operation.operands[2]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_pk_fp8_bf16(res, old, src, scale, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32PkFp8Bf16Op(res=res, old=old, src=src, scale=scale, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32PkFp8F16Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.pk.fp8.f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src, scale, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src)
    operands.append(scale)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def scale(self):
    return self.operation.operands[2]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_pk_fp8_f16(res, old, src, scale, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32PkFp8F16Op(res=res, old=old, src=src, scale=scale, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32PkFp8F32Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.pk.fp8.f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, srcA, srcB, scale, wordSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(srcA)
    operands.append(srcB)
    operands.append(scale)
    operands.append(wordSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def srcA(self):
    return self.operation.operands[1]

  @builtins.property
  def srcB(self):
    return self.operation.operands[2]

  @builtins.property
  def scale(self):
    return self.operation.operands[3]

  @builtins.property
  def wordSel(self):
    return self.operation.operands[4]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_pk_fp8_f32(res, old, src_a, src_b, scale, word_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32PkFp8F32Op(res=res, old=old, srcA=src_a, srcB=src_b, scale=scale, wordSel=word_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32SrBf8Bf16Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.sr.bf8.bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src, seed, scale, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src)
    operands.append(seed)
    operands.append(scale)
    operands.append(byteSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def seed(self):
    return self.operation.operands[2]

  @builtins.property
  def scale(self):
    return self.operation.operands[3]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[4]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_sr_bf8_bf16(res, old, src, seed, scale, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32SrBf8Bf16Op(res=res, old=old, src=src, seed=seed, scale=scale, byteSel=byte_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32SrBf8F16Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.sr.bf8.f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src, seed, scale, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src)
    operands.append(seed)
    operands.append(scale)
    operands.append(byteSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def seed(self):
    return self.operation.operands[2]

  @builtins.property
  def scale(self):
    return self.operation.operands[3]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[4]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_sr_bf8_f16(res, old, src, seed, scale, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32SrBf8F16Op(res=res, old=old, src=src, seed=seed, scale=scale, byteSel=byte_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32SrBf8F32Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.sr.bf8.f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src, seed, scale, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src)
    operands.append(seed)
    operands.append(scale)
    operands.append(byteSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def seed(self):
    return self.operation.operands[2]

  @builtins.property
  def scale(self):
    return self.operation.operands[3]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[4]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_sr_bf8_f32(res, old, src, seed, scale, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32SrBf8F32Op(res=res, old=old, src=src, seed=seed, scale=scale, byteSel=byte_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32SrFp8Bf16Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.sr.fp8.bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src, seed, scale, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src)
    operands.append(seed)
    operands.append(scale)
    operands.append(byteSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def seed(self):
    return self.operation.operands[2]

  @builtins.property
  def scale(self):
    return self.operation.operands[3]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[4]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_sr_fp8_bf16(res, old, src, seed, scale, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32SrFp8Bf16Op(res=res, old=old, src=src, seed=seed, scale=scale, byteSel=byte_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32SrFp8F16Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.sr.fp8.f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src, seed, scale, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src)
    operands.append(seed)
    operands.append(scale)
    operands.append(byteSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def seed(self):
    return self.operation.operands[2]

  @builtins.property
  def scale(self):
    return self.operation.operands[3]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[4]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_sr_fp8_f16(res, old, src, seed, scale, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32SrFp8F16Op(res=res, old=old, src=src, seed=seed, scale=scale, byteSel=byte_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtScaleF32SrFp8F32Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.scalef32.sr.fp8.f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src, seed, scale, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src)
    operands.append(seed)
    operands.append(scale)
    operands.append(byteSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def seed(self):
    return self.operation.operands[2]

  @builtins.property
  def scale(self):
    return self.operation.operands[3]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[4]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_scalef32_sr_fp8_f32(res, old, src, seed, scale, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtScaleF32SrFp8F32Op(res=res, old=old, src=src, seed=seed, scale=scale, byteSel=byte_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtSrBf8F32Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.sr.bf8.f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, srcA, srcB, old, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(srcA)
    operands.append(srcB)
    operands.append(old)
    operands.append(byteSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def srcA(self):
    return self.operation.operands[0]

  @builtins.property
  def srcB(self):
    return self.operation.operands[1]

  @builtins.property
  def old(self):
    return self.operation.operands[2]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_sr_bf8_f32(res, src_a, src_b, old, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtSrBf8F32Op(res=res, srcA=src_a, srcB=src_b, old=old, byteSel=byte_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CvtSrFp8F32Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.cvt.sr.fp8.f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, srcA, srcB, old, byteSel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(srcA)
    operands.append(srcB)
    operands.append(old)
    operands.append(byteSel)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def srcA(self):
    return self.operation.operands[0]

  @builtins.property
  def srcB(self):
    return self.operation.operands[1]

  @builtins.property
  def old(self):
    return self.operation.operands[2]

  @builtins.property
  def byteSel(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def cvt_sr_fp8_f32(res, src_a, src_b, old, byte_sel, *, loc=None, ip=None) -> _ods_ir.Value:
  return CvtSrFp8F32Op(res=res, srcA=src_a, srcB=src_b, old=old, byteSel=byte_sel, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class DPPUpdateOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.update.dpp"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src, dppCtrl, rowMask, bankMask, boundCtrl, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["dppCtrl"] = (dppCtrl if (
    isinstance(dppCtrl, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(dppCtrl, context=_ods_context))
    attributes["rowMask"] = (rowMask if (
    isinstance(rowMask, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(rowMask, context=_ods_context))
    attributes["bankMask"] = (bankMask if (
    isinstance(bankMask, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(bankMask, context=_ods_context))
    attributes["boundCtrl"] = (boundCtrl if (
    isinstance(boundCtrl, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I1Attr')) else
      _ods_ir.AttrBuilder.get('I1Attr')(boundCtrl, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def dppCtrl(self):
    return self.operation.attributes["dppCtrl"]

  @dppCtrl.setter
  def dppCtrl(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["dppCtrl"] = value

  @builtins.property
  def rowMask(self):
    return self.operation.attributes["rowMask"]

  @rowMask.setter
  def rowMask(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["rowMask"] = value

  @builtins.property
  def bankMask(self):
    return self.operation.attributes["bankMask"]

  @bankMask.setter
  def bankMask(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["bankMask"] = value

  @builtins.property
  def boundCtrl(self):
    return self.operation.attributes["boundCtrl"]

  @boundCtrl.setter
  def boundCtrl(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["boundCtrl"] = value

  @builtins.property
  def res(self):
    return self.operation.results[0]

def update_dpp(res, old, src, dpp_ctrl, row_mask, bank_mask, bound_ctrl, *, loc=None, ip=None) -> _ods_ir.Value:
  return DPPUpdateOp(res=res, old=old, src=src, dppCtrl=dpp_ctrl, rowMask=row_mask, bankMask=bank_mask, boundCtrl=bound_ctrl, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class DsBpermuteOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.ds_bpermute"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, index, src, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(index)
    operands.append(src)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def index(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def ds_bpermute(res, index, src, *, loc=None, ip=None) -> _ods_ir.Value:
  return DsBpermuteOp(res=res, index=index, src=src, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class DsSwizzleOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.ds_swizzle"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, offset, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src)
    operands.append(offset)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def offset(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def ds_swizzle(res, src, offset, *, loc=None, ip=None) -> _ods_ir.Value:
  return DsSwizzleOp(res=res, src=src, offset=offset, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class GlobalLoadLDSOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.global.load.lds"

  _ODS_REGIONS = (0, True)

  def __init__(self, globalPtr, ldsPtr, size, offset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(globalPtr)
    operands.append(ldsPtr)
    operands.append(size)
    operands.append(offset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def globalPtr(self):
    return self.operation.operands[0]

  @builtins.property
  def ldsPtr(self):
    return self.operation.operands[1]

  @builtins.property
  def size(self):
    return self.operation.operands[2]

  @builtins.property
  def offset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

def global_load_lds(global_ptr, lds_ptr, size, offset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Operation:
  return GlobalLoadLDSOp(globalPtr=global_ptr, ldsPtr=lds_ptr, size=size, offset=offset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class GridDimXOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.grid.dim.x"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, range=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if range is not None: attributes["range"] = (range if (
        isinstance(range, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_ConstantRangeAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_ConstantRangeAttr')(range, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def range(self):
    if "range" not in self.operation.attributes:
      return None
    return self.operation.attributes["range"]

  @range.setter
  def range(self, value):
    if value is not None:
      self.operation.attributes["range"] = value
    elif "range" in self.operation.attributes:
      del self.operation.attributes["range"]

  @range.deleter
  def range(self):
    del self.operation.attributes["range"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def grid_dim_x(res, *, range=None, loc=None, ip=None) -> _ods_ir.Value:
  return GridDimXOp(res=res, range=range, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class GridDimYOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.grid.dim.y"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, range=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if range is not None: attributes["range"] = (range if (
        isinstance(range, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_ConstantRangeAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_ConstantRangeAttr')(range, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def range(self):
    if "range" not in self.operation.attributes:
      return None
    return self.operation.attributes["range"]

  @range.setter
  def range(self, value):
    if value is not None:
      self.operation.attributes["range"] = value
    elif "range" in self.operation.attributes:
      del self.operation.attributes["range"]

  @range.deleter
  def range(self):
    del self.operation.attributes["range"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def grid_dim_y(res, *, range=None, loc=None, ip=None) -> _ods_ir.Value:
  return GridDimYOp(res=res, range=range, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class GridDimZOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.grid.dim.z"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, range=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if range is not None: attributes["range"] = (range if (
        isinstance(range, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_ConstantRangeAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_ConstantRangeAttr')(range, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def range(self):
    if "range" not in self.operation.attributes:
      return None
    return self.operation.attributes["range"]

  @range.setter
  def range(self, value):
    if value is not None:
      self.operation.attributes["range"] = value
    elif "range" in self.operation.attributes:
      del self.operation.attributes["range"]

  @range.deleter
  def range(self):
    del self.operation.attributes["range"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def grid_dim_z(res, *, range=None, loc=None, ip=None) -> _ods_ir.Value:
  return GridDimZOp(res=res, range=range, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class IglpOpt(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.iglp.opt"

  _ODS_REGIONS = (0, True)

  def __init__(self, variant, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["variant"] = (variant if (
    isinstance(variant, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(variant, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def variant(self):
    return self.operation.attributes["variant"]

  @variant.setter
  def variant(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["variant"] = value

def iglp_opt(variant, *, loc=None, ip=None) -> _ods_ir.Operation:
  return IglpOpt(variant=variant, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class MakeBufferRsrcOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.make.buffer.rsrc"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, base, stride, numRecords, flags, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(base)
    operands.append(stride)
    operands.append(numRecords)
    operands.append(flags)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def base(self):
    return self.operation.operands[0]

  @builtins.property
  def stride(self):
    return self.operation.operands[1]

  @builtins.property
  def numRecords(self):
    return self.operation.operands[2]

  @builtins.property
  def flags(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def make_buffer_rsrc(res, base, stride, num_records, flags, *, loc=None, ip=None) -> _ods_ir.Value:
  return MakeBufferRsrcOp(res=res, base=base, stride=stride, numRecords=num_records, flags=flags, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class MbcntHiOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mbcnt.hi"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, in0, in1, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(in0)
    operands.append(in1)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def in0(self):
    return self.operation.operands[0]

  @builtins.property
  def in1(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mbcnt_hi(res, in0, in1, *, loc=None, ip=None) -> _ods_ir.Value:
  return MbcntHiOp(res=res, in0=in0, in1=in1, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class MbcntLoOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mbcnt.lo"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, in0, in1, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(in0)
    operands.append(in1)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def in0(self):
    return self.operation.operands[0]

  @builtins.property
  def in1(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mbcnt_lo(res, in0, in1, *, loc=None, ip=None) -> _ods_ir.Value:
  return MbcntLoOp(res=res, in0=in0, in1=in1, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class PermlaneX16Op(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.permlanex16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, old, src0, src1, src2, fi, boundControl, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(old)
    operands.append(src0)
    operands.append(src1)
    operands.append(src2)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["fi"] = (fi if (
    isinstance(fi, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I1Attr')) else
      _ods_ir.AttrBuilder.get('I1Attr')(fi, context=_ods_context))
    attributes["boundControl"] = (boundControl if (
    isinstance(boundControl, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I1Attr')) else
      _ods_ir.AttrBuilder.get('I1Attr')(boundControl, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def old(self):
    return self.operation.operands[0]

  @builtins.property
  def src0(self):
    return self.operation.operands[1]

  @builtins.property
  def src1(self):
    return self.operation.operands[2]

  @builtins.property
  def src2(self):
    return self.operation.operands[3]

  @builtins.property
  def fi(self):
    return self.operation.attributes["fi"]

  @fi.setter
  def fi(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["fi"] = value

  @builtins.property
  def boundControl(self):
    return self.operation.attributes["boundControl"]

  @boundControl.setter
  def boundControl(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["boundControl"] = value

  @builtins.property
  def res(self):
    return self.operation.results[0]

def permlanex16(res, old, src0, src1, src2, fi, bound_control, *, loc=None, ip=None) -> _ods_ir.Value:
  return PermlaneX16Op(res=res, old=old, src0=src0, src1=src1, src2=src2, fi=fi, boundControl=bound_control, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class RawBufferAtomicCmpSwap(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.atomic.cmpswap"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, cmp, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src)
    operands.append(cmp)
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def cmp(self):
    return self.operation.operands[1]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[2]

  @builtins.property
  def offset(self):
    return self.operation.operands[3]

  @builtins.property
  def soffset(self):
    return self.operation.operands[4]

  @builtins.property
  def aux(self):
    return self.operation.operands[5]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def raw_buffer_atomic_cmpswap(res, src, cmp, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Value:
  return RawBufferAtomicCmpSwap(res=res, src=src, cmp=cmp, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class RawBufferAtomicFAddOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.atomic.fadd"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(vdata)
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

def raw_buffer_atomic_fadd(vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Operation:
  return RawBufferAtomicFAddOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class RawBufferAtomicFMaxOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.atomic.fmax"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(vdata)
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

def raw_buffer_atomic_fmax(vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Operation:
  return RawBufferAtomicFMaxOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class RawBufferAtomicSMaxOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.atomic.smax"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(vdata)
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

def raw_buffer_atomic_smax(vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Operation:
  return RawBufferAtomicSMaxOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class RawBufferAtomicUMinOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.atomic.umin"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(vdata)
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

def raw_buffer_atomic_umin(vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Operation:
  return RawBufferAtomicUMinOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class RawBufferLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.load"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rsrc(self):
    return self.operation.operands[0]

  @builtins.property
  def offset(self):
    return self.operation.operands[1]

  @builtins.property
  def soffset(self):
    return self.operation.operands[2]

  @builtins.property
  def aux(self):
    return self.operation.operands[3]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def raw_buffer_load(res, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Value:
  return RawBufferLoadOp(res=res, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class RawBufferStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.buffer.store"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(vdata)
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

def raw_buffer_store(vdata, rsrc, offset, soffset, aux, *, loc=None, ip=None) -> _ods_ir.Operation:
  return RawBufferStoreOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferAtomicCmpSwap(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.atomic.cmpswap"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src, cmp, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src)
    operands.append(cmp)
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src(self):
    return self.operation.operands[0]

  @builtins.property
  def cmp(self):
    return self.operation.operands[1]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[2]

  @builtins.property
  def offset(self):
    return self.operation.operands[3]

  @builtins.property
  def soffset(self):
    return self.operation.operands[4]

  @builtins.property
  def aux(self):
    return self.operation.operands[5]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def raw_ptr_buffer_atomic_cmpswap(res, src, cmp, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Value:
  return RawPtrBufferAtomicCmpSwap(res=res, src=src, cmp=cmp, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferAtomicFaddOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.atomic.fadd"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(vdata)
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

def raw_ptr_buffer_atomic_fadd(vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Operation:
  return RawPtrBufferAtomicFaddOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferAtomicFmaxOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.atomic.fmax"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(vdata)
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

def raw_ptr_buffer_atomic_fmax(vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Operation:
  return RawPtrBufferAtomicFmaxOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferAtomicSmaxOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.atomic.smax"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(vdata)
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

def raw_ptr_buffer_atomic_smax(vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Operation:
  return RawPtrBufferAtomicSmaxOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferAtomicUminOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.atomic.umin"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(vdata)
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

def raw_ptr_buffer_atomic_umin(vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Operation:
  return RawPtrBufferAtomicUminOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferLoadLdsOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.load.lds"

  _ODS_REGIONS = (0, True)

  def __init__(self, rsrc, ldsPtr, size, voffset, soffset, offset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(rsrc)
    operands.append(ldsPtr)
    operands.append(size)
    operands.append(voffset)
    operands.append(soffset)
    operands.append(offset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rsrc(self):
    return self.operation.operands[0]

  @builtins.property
  def ldsPtr(self):
    return self.operation.operands[1]

  @builtins.property
  def size(self):
    return self.operation.operands[2]

  @builtins.property
  def voffset(self):
    return self.operation.operands[3]

  @builtins.property
  def soffset(self):
    return self.operation.operands[4]

  @builtins.property
  def offset(self):
    return self.operation.operands[5]

  @builtins.property
  def aux(self):
    return self.operation.operands[6]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

def raw_ptr_buffer_load_lds(rsrc, lds_ptr, size, voffset, soffset, offset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Operation:
  return RawPtrBufferLoadLdsOp(rsrc=rsrc, ldsPtr=lds_ptr, size=size, voffset=voffset, soffset=soffset, offset=offset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.load"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rsrc(self):
    return self.operation.operands[0]

  @builtins.property
  def offset(self):
    return self.operation.operands[1]

  @builtins.property
  def soffset(self):
    return self.operation.operands[2]

  @builtins.property
  def aux(self):
    return self.operation.operands[3]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def raw_ptr_buffer_load(res, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Value:
  return RawPtrBufferLoadOp(res=res, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class RawPtrBufferStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.raw.ptr.buffer.store"

  _ODS_REGIONS = (0, True)

  def __init__(self, vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(vdata)
    operands.append(rsrc)
    operands.append(offset)
    operands.append(soffset)
    operands.append(aux)
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def vdata(self):
    return self.operation.operands[0]

  @builtins.property
  def rsrc(self):
    return self.operation.operands[1]

  @builtins.property
  def offset(self):
    return self.operation.operands[2]

  @builtins.property
  def soffset(self):
    return self.operation.operands[3]

  @builtins.property
  def aux(self):
    return self.operation.operands[4]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

def raw_ptr_buffer_store(vdata, rsrc, offset, soffset, aux, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Operation:
  return RawPtrBufferStoreOp(vdata=vdata, rsrc=rsrc, offset=offset, soffset=soffset, aux=aux, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ReadlaneOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.readlane"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, src0, src1, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(src0)
    operands.append(src1)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def src0(self):
    return self.operation.operands[0]

  @builtins.property
  def src1(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def readlane(res, src0, src1, *, loc=None, ip=None) -> _ods_ir.Value:
  return ReadlaneOp(res=res, src0=src0, src1=src1, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class SBarrierOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.s.barrier"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

def s_barrier(*, loc=None, ip=None) -> _ods_ir.Operation:
  return SBarrierOp(loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SWaitcntOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.s.waitcnt"

  _ODS_REGIONS = (0, True)

  def __init__(self, bitfield, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["bitfield"] = (bitfield if (
    isinstance(bitfield, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(bitfield, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def bitfield(self):
    return self.operation.attributes["bitfield"]

  @bitfield.setter
  def bitfield(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["bitfield"] = value

def s_waitcnt(bitfield, *, loc=None, ip=None) -> _ods_ir.Operation:
  return SWaitcntOp(bitfield=bitfield, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SchedBarrier(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.sched.barrier"

  _ODS_REGIONS = (0, True)

  def __init__(self, mask, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["mask"] = (mask if (
    isinstance(mask, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(mask, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def mask(self):
    return self.operation.attributes["mask"]

  @mask.setter
  def mask(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mask"] = value

def sched_barrier(mask, *, loc=None, ip=None) -> _ods_ir.Operation:
  return SchedBarrier(mask=mask, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SchedGroupBarrier(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.sched.group.barrier"

  _ODS_REGIONS = (0, True)

  def __init__(self, mask, size, groupId, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["mask"] = (mask if (
    isinstance(mask, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(mask, context=_ods_context))
    attributes["size"] = (size if (
    isinstance(size, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(size, context=_ods_context))
    attributes["groupId"] = (groupId if (
    isinstance(groupId, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(groupId, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def mask(self):
    return self.operation.attributes["mask"]

  @mask.setter
  def mask(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mask"] = value

  @builtins.property
  def size(self):
    return self.operation.attributes["size"]

  @size.setter
  def size(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["size"] = value

  @builtins.property
  def groupId(self):
    return self.operation.attributes["groupId"]

  @groupId.setter
  def groupId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["groupId"] = value

def sched_group_barrier(mask, size, group_id, *, loc=None, ip=None) -> _ods_ir.Operation:
  return SchedGroupBarrier(mask=mask, size=size, groupId=group_id, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SetPrioOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.s.setprio"

  _ODS_REGIONS = (0, True)

  def __init__(self, priority, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["priority"] = (priority if (
    isinstance(priority, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I16Attr')) else
      _ods_ir.AttrBuilder.get('I16Attr')(priority, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def priority(self):
    return self.operation.attributes["priority"]

  @priority.setter
  def priority(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["priority"] = value

def s_setprio(priority, *, loc=None, ip=None) -> _ods_ir.Operation:
  return SetPrioOp(priority=priority, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ThreadIdXOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workitem.id.x"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, range=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if range is not None: attributes["range"] = (range if (
        isinstance(range, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_ConstantRangeAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_ConstantRangeAttr')(range, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def range(self):
    if "range" not in self.operation.attributes:
      return None
    return self.operation.attributes["range"]

  @range.setter
  def range(self, value):
    if value is not None:
      self.operation.attributes["range"] = value
    elif "range" in self.operation.attributes:
      del self.operation.attributes["range"]

  @range.deleter
  def range(self):
    del self.operation.attributes["range"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workitem_id_x(res, *, range=None, loc=None, ip=None) -> _ods_ir.Value:
  return ThreadIdXOp(res=res, range=range, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class ThreadIdYOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workitem.id.y"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, range=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if range is not None: attributes["range"] = (range if (
        isinstance(range, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_ConstantRangeAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_ConstantRangeAttr')(range, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def range(self):
    if "range" not in self.operation.attributes:
      return None
    return self.operation.attributes["range"]

  @range.setter
  def range(self, value):
    if value is not None:
      self.operation.attributes["range"] = value
    elif "range" in self.operation.attributes:
      del self.operation.attributes["range"]

  @range.deleter
  def range(self):
    del self.operation.attributes["range"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workitem_id_y(res, *, range=None, loc=None, ip=None) -> _ods_ir.Value:
  return ThreadIdYOp(res=res, range=range, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class ThreadIdZOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.workitem.id.z"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, range=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if range is not None: attributes["range"] = (range if (
        isinstance(range, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_ConstantRangeAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_ConstantRangeAttr')(range, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def range(self):
    if "range" not in self.operation.attributes:
      return None
    return self.operation.attributes["range"]

  @range.setter
  def range(self, value):
    if value is not None:
      self.operation.attributes["range"] = value
    elif "range" in self.operation.attributes:
      del self.operation.attributes["range"]

  @range.deleter
  def range(self):
    del self.operation.attributes["range"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def workitem_id_z(res, *, range=None, loc=None, ip=None) -> _ods_ir.Value:
  return ThreadIdZOp(res=res, range=range, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class WaitDscntOp(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.s.wait.dscnt"

  _ODS_REGIONS = (0, True)

  def __init__(self, id, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["id"] = (id if (
    isinstance(id, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I16Attr')) else
      _ods_ir.AttrBuilder.get('I16Attr')(id, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def id(self):
    return self.operation.attributes["id"]

  @id.setter
  def id(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["id"] = value

def s_wait_dscnt(id, *, loc=None, ip=None) -> _ods_ir.Operation:
  return WaitDscntOp(id=id, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ds_read_tr4_b64(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.ds.read.tr4.b64"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, ptr, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ptr)
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ptr(self):
    return self.operation.operands[0]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def ds_read_tr4_b64_(res, ptr, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Value:
  return ds_read_tr4_b64(res=res, ptr=ptr, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class ds_read_tr6_b96(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.ds.read.tr6.b96"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, ptr, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ptr)
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ptr(self):
    return self.operation.operands[0]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def ds_read_tr6_b96_(res, ptr, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Value:
  return ds_read_tr6_b96(res=res, ptr=ptr, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class ds_read_tr8_b64(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.ds.read.tr8.b64"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, ptr, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ptr)
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ptr(self):
    return self.operation.operands[0]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def ds_read_tr8_b64_(res, ptr, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Value:
  return ds_read_tr8_b64(res=res, ptr=ptr, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class ds_read_tr16_b64(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.ds.read.tr16.b64"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, ptr, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ptr)
    _ods_context = _ods_get_default_loc_context(loc)
    if alias_scopes is not None: attributes["alias_scopes"] = (alias_scopes if (
        isinstance(alias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(alias_scopes, context=_ods_context))
    if noalias_scopes is not None: attributes["noalias_scopes"] = (noalias_scopes if (
        isinstance(noalias_scopes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_AliasScopeArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_AliasScopeArrayAttr')(noalias_scopes, context=_ods_context))
    if tbaa is not None: attributes["tbaa"] = (tbaa if (
        isinstance(tbaa, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('LLVM_TBAATagArrayAttr')) else
          _ods_ir.AttrBuilder.get('LLVM_TBAATagArrayAttr')(tbaa, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ptr(self):
    return self.operation.operands[0]

  @builtins.property
  def alias_scopes(self):
    if "alias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["alias_scopes"]

  @alias_scopes.setter
  def alias_scopes(self, value):
    if value is not None:
      self.operation.attributes["alias_scopes"] = value
    elif "alias_scopes" in self.operation.attributes:
      del self.operation.attributes["alias_scopes"]

  @alias_scopes.deleter
  def alias_scopes(self):
    del self.operation.attributes["alias_scopes"]

  @builtins.property
  def noalias_scopes(self):
    if "noalias_scopes" not in self.operation.attributes:
      return None
    return self.operation.attributes["noalias_scopes"]

  @noalias_scopes.setter
  def noalias_scopes(self, value):
    if value is not None:
      self.operation.attributes["noalias_scopes"] = value
    elif "noalias_scopes" in self.operation.attributes:
      del self.operation.attributes["noalias_scopes"]

  @noalias_scopes.deleter
  def noalias_scopes(self):
    del self.operation.attributes["noalias_scopes"]

  @builtins.property
  def tbaa(self):
    if "tbaa" not in self.operation.attributes:
      return None
    return self.operation.attributes["tbaa"]

  @tbaa.setter
  def tbaa(self, value):
    if value is not None:
      self.operation.attributes["tbaa"] = value
    elif "tbaa" in self.operation.attributes:
      del self.operation.attributes["tbaa"]

  @tbaa.deleter
  def tbaa(self):
    del self.operation.attributes["tbaa"]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def ds_read_tr16_b64_(res, ptr, *, alias_scopes=None, noalias_scopes=None, tbaa=None, loc=None, ip=None) -> _ods_ir.Value:
  return ds_read_tr16_b64(res=res, ptr=ptr, alias_scopes=alias_scopes, noalias_scopes=noalias_scopes, tbaa=tbaa, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_4x4x1f32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.4x4x1f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_4x4x1f32_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_4x4x1f32(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_4x4x2bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.4x4x2bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_4x4x2bf16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_4x4x2bf16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_4x4x4bf16_1k(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.4x4x4bf16.1k"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_4x4x4bf16_1k_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_4x4x4bf16_1k(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_4x4x4f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.4x4x4f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_4x4x4f16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_4x4x4f16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x1f32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x1f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x1f32_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x1f32(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x2bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x2bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x2bf16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x2bf16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x4bf16_1k(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x4bf16.1k"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x4bf16_1k_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x4bf16_1k(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x4f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x4f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x4f16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x4f16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x4f32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x4f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x4f32_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x4f32(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x8_xf32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x8.xf32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x8_xf32_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x8_xf32(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x8bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x8bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x8bf16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x8bf16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x16bf16_1k(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x16bf16.1k"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x16bf16_1k_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x16bf16_1k(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x16f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x16f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x16f16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x16f16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x32_bf8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x32.bf8.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x32_bf8_bf8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x32_bf8_bf8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x32_bf8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x32.bf8.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x32_bf8_fp8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x32_bf8_fp8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x32_bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x32.bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x32_bf16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x32_bf16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x32_f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x32.f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x32_f16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x32_f16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x32_fp8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x32.fp8.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x32_fp8_bf8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x32_fp8_bf8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_16x16x32_fp8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.16x16x32.fp8.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_16x16x32_fp8_fp8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_16x16x32_fp8_fp8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x1f32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x1f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x1f32_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x1f32(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x2bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x2bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x2bf16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x2bf16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x2f32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x2f32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x2f32_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x2f32(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x4_xf32(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x4.xf32"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x4_xf32_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x4_xf32(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x4bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x4bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x4bf16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x4bf16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x4bf16_1k(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x4bf16.1k"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x4bf16_1k_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x4bf16_1k(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x4f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x4f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x4f16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x4f16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x8bf16_1k(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x8bf16.1k"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x8bf16_1k_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x8bf16_1k(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x8f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x8f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x8f16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x8f16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x16_bf8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x16.bf8.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x16_bf8_bf8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x16_bf8_bf8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x16_bf8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x16.bf8.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x16_bf8_fp8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x16_bf8_fp8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x16_bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x16.bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x16_bf16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x16_bf16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x16_f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x16.f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x16_f16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x16_f16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x16_fp8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x16.fp8.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x16_fp8_bf8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x16_fp8_bf8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f32_32x32x16_fp8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f32.32x32x16.fp8.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f32_32x32x16_fp8_fp8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f32_32x32x16_fp8_fp8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f64_4x4x4f64(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f64.4x4x4f64"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f64_4x4x4f64_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f64_4x4x4f64(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_f64_16x16x4f64(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.f64.16x16x4f64"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_f64_16x16x4f64_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_f64_16x16x4f64(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_i32_4x4x4i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.4x4x4i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_4x4x4i8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_i32_4x4x4i8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_i32_16x16x4i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.16x16x4i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_16x16x4i8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_i32_16x16x4i8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_i32_16x16x16i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.16x16x16i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_16x16x16i8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_i32_16x16x16i8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_i32_16x16x32_i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.16x16x32.i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_16x16x32_i8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_i32_16x16x32_i8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_i32_16x16x64_i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.16x16x64.i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_16x16x64_i8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_i32_16x16x64_i8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_i32_32x32x4i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.32x32x4i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_32x32x4i8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_i32_32x32x4i8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_i32_32x32x8i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.32x32x8i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_32x32x8i8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_i32_32x32x8i8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_i32_32x32x16_i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.32x32x16.i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_32x32x16_i8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_i32_32x32x16_i8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_i32_32x32x32_i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.i32.32x32x32.i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_i32_32x32x32_i8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_i32_32x32x32_i8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_scale_f32_16x16x128_f8f6f4(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.scale.f32.16x16x128.f8f6f4"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_scale_f32_16x16x128_f8f6f4_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_scale_f32_16x16x128_f8f6f4(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class mfma_scale_f32_32x32x64_f8f6f4(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.mfma.scale.f32.32x32x64.f8f6f4"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def mfma_scale_f32_32x32x64_f8f6f4_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return mfma_scale_f32_32x32x64_f8f6f4(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_f32_16x16x32_bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.f32.16x16x32.bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_f32_16x16x32_bf16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_f32_16x16x32_bf16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_f32_16x16x32_f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.f32.16x16x32.f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_f32_16x16x32_f16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_f32_16x16x32_f16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_f32_16x16x64_bf8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.f32.16x16x64.bf8.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_f32_16x16x64_bf8_bf8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_f32_16x16x64_bf8_bf8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_f32_16x16x64_bf8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.f32.16x16x64.bf8.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_f32_16x16x64_bf8_fp8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_f32_16x16x64_bf8_fp8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_f32_16x16x64_fp8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.f32.16x16x64.fp8.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_f32_16x16x64_fp8_bf8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_f32_16x16x64_fp8_bf8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_f32_16x16x64_fp8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.f32.16x16x64.fp8.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_f32_16x16x64_fp8_fp8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_f32_16x16x64_fp8_fp8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_f32_32x32x16_bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.f32.32x32x16.bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_f32_32x32x16_bf16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_f32_32x32x16_bf16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_f32_32x32x16_f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.f32.32x32x16.f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_f32_32x32x16_f16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_f32_32x32x16_f16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_f32_32x32x32_bf8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.f32.32x32x32.bf8.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_f32_32x32x32_bf8_bf8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_f32_32x32x32_bf8_bf8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_f32_32x32x32_bf8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.f32.32x32x32.bf8.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_f32_32x32x32_bf8_fp8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_f32_32x32x32_bf8_fp8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_f32_32x32x32_fp8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.f32.32x32x32.fp8.bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_f32_32x32x32_fp8_bf8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_f32_32x32x32_fp8_bf8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_f32_32x32x32_fp8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.f32.32x32x32.fp8.fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_f32_32x32x32_fp8_fp8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_f32_32x32x32_fp8_fp8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_i32_16x16x64_i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.i32.16x16x64.i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_i32_16x16x64_i8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_i32_16x16x64_i8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class smfmac_i32_32x32x32_i8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.smfmac.i32.32x32x32.i8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def smfmac_i32_32x32x32_i8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return smfmac_i32_32x32x32_i8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class wmma_bf16_16x16x16_bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.bf16.16x16x16.bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_bf16_16x16x16_bf16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return wmma_bf16_16x16x16_bf16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class wmma_f16_16x16x16_f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.f16.16x16x16.f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_f16_16x16x16_f16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return wmma_f16_16x16x16_f16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class wmma_f32_16x16x16_bf8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.f32.16x16x16.bf8_bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_f32_16x16x16_bf8_bf8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return wmma_f32_16x16x16_bf8_bf8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class wmma_f32_16x16x16_bf8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.f32.16x16x16.bf8_fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_f32_16x16x16_bf8_fp8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return wmma_f32_16x16x16_bf8_fp8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class wmma_f32_16x16x16_bf16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.f32.16x16x16.bf16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_f32_16x16x16_bf16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return wmma_f32_16x16x16_bf16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class wmma_f32_16x16x16_f16(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.f32.16x16x16.f16"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_f32_16x16x16_f16_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return wmma_f32_16x16x16_f16(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class wmma_f32_16x16x16_fp8_bf8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.f32.16x16x16.fp8_bf8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_f32_16x16x16_fp8_bf8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return wmma_f32_16x16x16_fp8_bf8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class wmma_f32_16x16x16_fp8_fp8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.f32.16x16x16.fp8_fp8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_f32_16x16x16_fp8_fp8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return wmma_f32_16x16x16_fp8_fp8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class wmma_i32_16x16x16_iu4(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.i32.16x16x16.iu4"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_i32_16x16x16_iu4_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return wmma_i32_16x16x16_iu4(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class wmma_i32_16x16x16_iu8(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.i32.16x16x16.iu8"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_i32_16x16x16_iu8_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return wmma_i32_16x16x16_iu8(res=res, args=args, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class wmma_i32_16x16x32_iu4(_ods_ir.OpView):
  OPERATION_NAME = "rocdl.wmma.i32.16x16x32.iu4"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, args, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def wmma_i32_16x16x32_iu4_(res, args, *, loc=None, ip=None) -> _ods_ir.Value:
  return wmma_i32_16x16x32_iu4(res=res, args=args, loc=loc, ip=ip).result
