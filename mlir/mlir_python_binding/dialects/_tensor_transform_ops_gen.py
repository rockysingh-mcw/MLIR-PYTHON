
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


from ._transform_ops_gen import _Dialect

@_ods_cext.register_operation(_Dialect)
class ApplyBubbleUpExtractSlicePatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.tensor.bubble_up_extract_slice"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

def apply_patterns_tensor_bubble_up_extract_slice(*, loc=None, ip=None) -> _ods_ir.Operation:
  return ApplyBubbleUpExtractSlicePatternsOp(loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ApplyDecomposeTensorConcatPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.tensor.decompose_concat"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

def apply_patterns_tensor_decompose_concat(*, loc=None, ip=None) -> _ods_ir.Operation:
  return ApplyDecomposeTensorConcatPatternsOp(loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ApplyDropRedundantInsertSliceRankExpansionPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.tensor.drop_redundant_insert_slice_rank_expansion"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

def apply_patterns_tensor_drop_redundant_insert_slice_rank_expansion(*, loc=None, ip=None) -> _ods_ir.Operation:
  return ApplyDropRedundantInsertSliceRankExpansionPatternsOp(loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ApplyFoldTensorEmptyPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.tensor.fold_tensor_empty"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, fold_single_use_only=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if fold_single_use_only is not None: attributes["fold_single_use_only"] = (fold_single_use_only if (
        isinstance(fold_single_use_only, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('BoolAttr')) else
          _ods_ir.AttrBuilder.get('BoolAttr')(fold_single_use_only, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def fold_single_use_only(self):
    return self.operation.attributes["fold_single_use_only"]

  @fold_single_use_only.setter
  def fold_single_use_only(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["fold_single_use_only"] = value

def apply_patterns_tensor_fold_tensor_empty(*, fold_single_use_only=None, loc=None, ip=None) -> _ods_ir.Operation:
  return ApplyFoldTensorEmptyPatternsOp(fold_single_use_only=fold_single_use_only, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ApplyFoldTensorSubsetOpsIntoVectorTransfersPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.tensor.fold_tensor_subset_ops_into_vector_transfers"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

def apply_patterns_tensor_fold_tensor_subset_ops_into_vector_transfers(*, loc=None, ip=None) -> _ods_ir.Operation:
  return ApplyFoldTensorSubsetOpsIntoVectorTransfersPatternsOp(loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ApplyFoldTensorSubsetOpsPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.tensor.fold_tensor_subset_ops"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

def apply_patterns_tensor_fold_tensor_subset_ops(*, loc=None, ip=None) -> _ods_ir.Operation:
  return ApplyFoldTensorSubsetOpsPatternsOp(loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ApplyMergeConsecutiveInsertExtractSlicePatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.tensor.merge_consecutive_insert_extract_slice"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

def apply_patterns_tensor_merge_consecutive_insert_extract_slice(*, loc=None, ip=None) -> _ods_ir.Operation:
  return ApplyMergeConsecutiveInsertExtractSlicePatternsOp(loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ApplyReassociativeReshapeFoldingPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.tensor.reassociative_reshape_folding"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

def apply_patterns_tensor_reassociative_reshape_folding(*, loc=None, ip=None) -> _ods_ir.Operation:
  return ApplyReassociativeReshapeFoldingPatternsOp(loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ApplyRewriteTensorOpsAsConstantPatternsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.apply_patterns.tensor.rewrite_as_constant"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, aggressive=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(aggressive): attributes["aggressive"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def aggressive(self):
    return "aggressive" in self.operation.attributes

  @aggressive.setter
  def aggressive(self, value):
    if bool(value):
      self.operation.attributes["aggressive"] = _ods_ir.UnitAttr.get()
    elif "aggressive" in self.operation.attributes:
      del self.operation.attributes["aggressive"]

  @aggressive.deleter
  def aggressive(self):
    del self.operation.attributes["aggressive"]

def apply_patterns_tensor_rewrite_as_constant(*, aggressive=None, loc=None, ip=None) -> _ods_ir.Operation:
  return ApplyRewriteTensorOpsAsConstantPatternsOp(aggressive=aggressive, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class MakeLoopIndependentOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.tensor.make_loop_independent"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, num_loops, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(target)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["num_loops"] = (num_loops if (
    isinstance(num_loops, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(num_loops, context=_ods_context))
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def num_loops(self):
    return self.operation.attributes["num_loops"]

  @num_loops.setter
  def num_loops(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["num_loops"] = value

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

def tensor_make_loop_independent(transformed, target, num_loops, *, loc=None, ip=None) -> _ods_ir.Value:
  return MakeLoopIndependentOp(transformed=transformed, target=target, num_loops=num_loops, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class TypeConversionCastShapeDynamicDimsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.type_conversion.tensor.cast_shape_dynamic_dims"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, ignore_dynamic_info=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(ignore_dynamic_info): attributes["ignore_dynamic_info"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ignore_dynamic_info(self):
    return "ignore_dynamic_info" in self.operation.attributes

  @ignore_dynamic_info.setter
  def ignore_dynamic_info(self, value):
    if bool(value):
      self.operation.attributes["ignore_dynamic_info"] = _ods_ir.UnitAttr.get()
    elif "ignore_dynamic_info" in self.operation.attributes:
      del self.operation.attributes["ignore_dynamic_info"]

  @ignore_dynamic_info.deleter
  def ignore_dynamic_info(self):
    del self.operation.attributes["ignore_dynamic_info"]

def type_conversion_tensor_cast_shape_dynamic_dims(*, ignore_dynamic_info=None, loc=None, ip=None) -> _ods_ir.Operation:
  return TypeConversionCastShapeDynamicDimsOp(ignore_dynamic_info=ignore_dynamic_info, loc=loc, ip=ip)
